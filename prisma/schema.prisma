// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  createdAt         DateTime           @default(now())
  userPets          UserPets[]
  // messages_from_user Message[]  @relation("from_user_id")
  // messages_to_user   Message[]  @relation("to_user_id")
  NotInterestedPets NotInterestedPet[]

  @@map("users")
}

model Adress {
  id         Int      @id @default(autoincrement())
  stateId    Int
  state      State    @relation(fields: [stateId], references: [id])
  cityId     Int
  city       City     @relation(fields: [cityId], references: [id])
  districtId Int
  district   District @relation(fields: [districtId], references: [id])
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  city   City[]
  adress Adress[]

  @@map("states")
}

model City {
  id      Int    @id @default(autoincrement())
  name    String
  stateId Int
  state   State  @relation(fields: [stateId], references: [id])

  createdAt DateTime   @default(now())
  district  District[]
  adress    Adress[]

  @@map("cities")
}

model District {
  id     Int    @id @default(autoincrement())
  name   String
  cityId Int
  city   City   @relation(fields: [cityId], references: [id])

  createdAt DateTime @default(now())
  adress    Adress[]

  @@map("districts")
}

model UserPets {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  petId     Int
  pet       Pet      @relation(fields: [petId], references: [id])
  createdAt DateTime @default(now())

  @@map("user_pets")
}

model NotInterestedPet {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  petId  Int
  pet    Pet  @relation(fields: [petId], references: [id])

  @@map("not_interested_pet")
}

model Pet {
  id         Int     @id @default(autoincrement())
  name       String
  type       PetType
  age        Int
  weight     Float
  vaccinated Boolean
  about      String

  breedId Int
  breed   Breed @relation(fields: [breedId], references: [id])

  createdAt         DateTime           @default(now())
  userPets          UserPets[]
  petPictures       petPictures[]
  NotInterestedPets NotInterestedPet[]

  @@map("pets")
}

model Breed {
  id        Int      @id @default(autoincrement())
  name      String
  type      PetType
  createdAt DateTime @default(now())
  pets      Pet[]

  @@map("breeds")
}

model petPictures {
  id        Int      @id @default(autoincrement())
  petId     Int
  pet       Pet      @relation(fields: [petId], references: [id])
  pictureId Int
  picture   Picture  @relation(fields: [pictureId], references: [id])
  createdAt DateTime @default(now())

  @@map("pet_pictures")
}

model Picture {
  id          Int           @id @default(autoincrement())
  url         String
  createdAt   DateTime      @default(now())
  petPictures petPictures[]

  @@map("pictures")
}

enum PetType {
  dog
  cat
}

// model ChatRoom {
//   id        Int      @id @default(autoincrement())

//   createdAt DateTime @default(now())

// }

// model Message {
//   id      Int    @id @default(autoincrement())
//   message String
//   fromId  Int
//   from    User   @relation("from_user_id", fields: [fromId], references: [id])
//   toId    Int
//   to      User   @relation("to_user_id", fields: [toId], references: [id])

//   createdAt DateTime @default(now())

//   @@map("messages")
// }
